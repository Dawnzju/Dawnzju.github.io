<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>ArSMART An Improved SMART NoC Design Supporting Arbitrary-Turn Transmission</title>
    <url>/2020/08/27/ArSMART%20An%20Improved%20SMART%20NoC%20Design%20Supporting%20Arbitrary-Turn%20Transmission/</url>
    <content><![CDATA[<p><img src="/images/arsmart.jpg" alt="ArSMART NoC Design (a). Overview of ArSMART; (b). Cluster structure; (c). Router design."></p>
<h2 id="Source"><a href="#Source" class="headerlink" title="Source"></a>Source</h2><p>This paper published in TCAD. To refer this:  </p>
<pre><code>Hui Chen, Peng Chen, Jun Zhou, L. H. K. Duong and Weichen Liu, &quot;ArSMART: An Improved SMART NoC Design Supporting Arbitrary-Turn Transmission,&quot; in IEEE Transactions on Computer-Aided Design of Integrated Circuits and Systems, doi: 10.1109/TCAD.2021.3091961. 
</code></pre>
<h2 id="Abstract"><a href="#Abstract" class="headerlink" title="Abstract"></a>Abstract</h2><p>SMART NoC, which transmits unconflicted flits to distant processing elements (PEs) in one cycle through the express bypass, is a high-performance NoC design proposed recently.<br>However, if contention occurs, flits with low priority would not only be buffered but also could not fully utilize bypass. Although there exist several routing algorithms that decrease contentions by rounding busy routers and links, they cannot be directly applicable to SMART since it lacks the support for arbitrary-turn (i.e., the number and direction of turns are free of constraints) routing. Thus, in this article, to minimize contentions and further utilize bypass, we propose an improved SMART NoC, called ArSMART, in which arbitrary-turn transmission is enabled. Specifically, ArSMART divides the whole NoC into multiple clusters where the route computation is conducted by the cluster controller and the data forwarding is performed by the bufferless reconfigurable router. </p>
<span id="more"></span>
<p>Since the long-range transmission in SMART NoC needs to bypass the intermediate arbitration, to enable this feature, we directly configure the input and output ports connection rather than apply hop-by-hop table-based arbitration. To further explore the higher communication capabilities, effective adaptive routing algorithms that are compatible with ArSMART are proposed. The route computation overhead, one of the main concerns for adaptive routing algorithms, is hidden by our carefully designed control mechanism.<br>Compared with the state-of-the-art SMART NoC, the experimental results demonstrate an average reduction of 40.7% in application schedule length and 29.7% in energy consumption.</p>
<hr>
<h2 id="Introduction-Preview"><a href="#Introduction-Preview" class="headerlink" title="Introduction Preview"></a>Introduction Preview</h2><p>With the increasing number of processing elements (PEs) integrated into one chip, the communication between PEs becomes the bottleneck for performance improvement. Based on the modified Amdahl’s law which considers the effect of communication and synchronization in multi-core systems, the communication bottleneck damps the speedup gained by parallelism and computation acceleration. To support high-speed communication among PEs, network-on-chip (NoC), as a widespread communication infrastructure for large-scale many-core systems, has been refined and evolved in recent works. SMART NoC, which transmits unconflicted flits to distant PEs within one cycle through express long-distance bypass paths, is one of the most successful NoC designs. Experiments show that if every flit is magically sent from the source to its destination by using the single-cycle long-distance path, up to 85% application schedule length reduction can be achieved compared with state-of-the-art traditional NoCs. This is the “ideal” performance that SMART provides, with the optimistic assumption of single-cycle source-destination paths for all flits.</p>
<p>However, in practice, the actual SMART NoC performance is far away from the ideal case since the single-cycle long-distance path can hardly be built for all flits since only the winner of the arbitration among multiple long path setup requests can set up long-range links. If one packet is blocked by other packets, its bypass is broken which degrades the benefits gained by SMART NoC. Besides, the long-range path establishment is costly due to additional pipeline stages and broadcast links. To reduce wire and energy overhead of original SMART NoC, novel designs are proposed.Also, researchers try to reduce contentions from the task mapping and routing perspectives. The first work turns to task mapping which is limited by the availability of PEs and only performs well in homogeneous systems.Peng et al. try to avoid contention through XY-YX routing with intermediate nodes. However, in such design, routes for messages are not fully flexible and constrained by the number of turns.Thus, the contention issue is not fully addressed in aforementioned works.A straightforward way to significantly reduce the contentions is to relax these routing constraints and enable the data transmission of arbitrary-turn paths.</p>
<p>The challenge for SMART NoC to support arbitrary-turn transmission is placed by its distributed decision-making mechanism. In the start router, the route for a packet is locally computed and then a SMART-hop setup request (SSR), which carries the route information, is broadcast to the downstream routers via dedicated repeated wires to establish bypass. This local decision-making mechanism limits the routing algorithm used in SMART NoC in two aspects. </p>
<ol>
<li>With the limited area constraint and deadlock requirement, the current route computation module within the SMART NoC router is rather functionally limited, resulting in that only rule-based routing strategy (e.g., XY), which is deterministic and only allows specific turns, is applied. </li>
<li>The SSR delivery is constrained by the dedicated wires or using specific SSR network, which does not support SSR transmission with arbitrary-turn.<br>Thus, even revising the original route compute unit and letting it support arbitrary-turn transmission, e.g., using the table-based method, the constrained SSR delivery is not compatible with the arbitrary-turn transmission. To support the single-cycle long-distance transmission with arbitrary-turn, centralized or cluster-based design is needed. Also, inspired by that the optimal solution is easier to be derived based on global information instead of local information, the centralized or cluster-based method could manage NoC resource (i.e., routers and links) better. </li>
</ol>
<p>In this article, we propose a novel NoC design based on SMART NoC, called ArSMART, which significantly decreases resource contentions and further fully utilizes bypass via our proposed mechanism of establishing arbitrary-turn paths.The main contributions of our article are as follows:  </p>
<ul>
<li>1）We develop an NoC design, ArSMART NoC, to set up single-cycle long-distance paths and support arbitrary-turn data transmission, which significantly reduces resource contentions. Specifically, ArSMART divides the whole NoC into multiple clusters where the route computation is conducted by the cluster controller and the data forwarding is performed by the bufferless reconfigurable router.    </li>
<li>2）We present corresponding routing algorithms that enable ArSMART to manage NoC resources efficiently.<br>Specifically, we conduct the route computation to generate a route before they demand at runtime, considering the real-time network state. The challenge to design routing algorithms for ArSMART is the difference of network states used in route computation and actual transmission. Our algorithms manage to minimize such impact and lessen contentions to improve NoC performance.  </li>
<li>3）We implement the ArSMART design and matched routing algorithms in Gem5, and conduct a full system simulation to show their effectiveness. Compared with the state-of-the-art SMART NoC, the experimental results demonstrate an average reduction of 40.7% in application schedule length and 29.7% in energy consumption.</li>
</ul>
<hr>
<h2 id="Releted-Repo"><a href="#Releted-Repo" class="headerlink" title="Releted Repo"></a>Releted Repo</h2>]]></content>
      <categories>
        <category>Publications</category>
      </categories>
      <tags>
        <tag>ArSMART</tag>
        <tag>Article</tag>
      </tags>
  </entry>
  <entry>
    <title>MARCO A High-performance Task Mapping and Routing Co-optimization Framework for NoC-based Heterogeneous Computing Systems</title>
    <url>/2021/04/27/MACRO/</url>
    <content><![CDATA[<p><img src="/images/marco.jpg" alt=" Motivation  examples.  (a).  DAG  modeled  application  and  processing  rate  of  different  PEs;  (b).Computation-aware mapping and SOTA routing; (c). Communication-aware mapping and SOTA routing; (d).Co-optimized mapping and routing."></p>
<h2 id="Source"><a href="#Source" class="headerlink" title="Source"></a>Source</h2><p>This paper published in TCAD. To refer this:  </p>
<blockquote>
<p>Hui Chen, Zihao Zhang, Peng Chen, Xiangzhong Luo, Shiqing Li and Weichen Liu, “MARCO: A High-performance Task Mapping and Routing Co-optimization Framework for Point-to-Point NoC-based Heterogeneous Computing Systems”, in ACM Transactions on Embedded Computing Systems, doi: 10.1145/3476985</p>
</blockquote>
<blockquote>
<p>Hui Chen, Zihao Zhang, Peng Chen, Xiangzhong Luo, Shiqing Li and Weichen Liu, “MARCO: A High-performance Task Mapping and Routing Co-optimization Framework for Point-to-Point NoC-based Heterogeneous Computing Systems”, in Proceedings of International Conference on Compilers, Architecture, and Synthesis of Embedded Systems (ESWEEK-CASES ‘21), October 08-15, 2021, Virtual Event.</p>
</blockquote>
<h2 id="Abstract"><a href="#Abstract" class="headerlink" title="Abstract"></a>Abstract</h2><span id="more"></span>
<p>Heterogeneous computing systems (HCSs) , which consist of various processing elements (PEs) that vary in their processing ability, are usually facilitated by the network-on-chip (NoC) to interconnect its components. The emerging point-to-point NoCs which support single-cycle-multi-hop transmission, reduce or eliminate the latency dependence on distance, addressing the scalability concern raised by high latency for long-distance transmission and enlarging the design space of the routing algorithm to search the non-shortest paths. For such point-to-point NoC-based HCSs, resource management strategies which are managed by compilers, scheduler, or controllers, e.g., mapping and routing, are complicated for the following reasons: </p>
<ul>
<li>(1) Due to the heterogeneity, mapping and routing need to optimize computation and communication concurrently (for homogeneous computing systems, only communication). </li>
<li>(2) Conducting mapping and routing consecutively cannot minimize the schedule length in most cases since the PEs with high processing ability may locate in the crowded area and suffer from high resource contention overhead. </li>
<li>(3) Since changing the mapping selection of one task will reconstruct the whole routing design space, the exploration of mapping and routing design space is challenging.</li>
</ul>
<p>Therefore, in this work, we propose MARCO, the <u>m</u>apping <u>a</u>nd <u>r</u>outing <u>co</u>-optimization framework, to decrease the schedule length of applications on point-to-point NoC-based HCSs. Specifically, we revise the tabu search to explore the design space and evaluate the quality of mapping and routing. The advanced reinforcement learning (RL)algorithm, i.e., advantage actor-critic, is adopted to efficiently compute paths.<br>We perform extensive experiments on various real applications, which demonstrates that the MARCO achieves a remarkable performance improvement in terms of schedule length (+44.94% ~ +50.18%) when compared with the state-of-the-art mapping and routing co-optimization algorithm for homogeneous computing systems. We also compare MARCO with different combinations of state-of-the-art mapping and routing approaches.</p>
<hr>
<h2 id="Introduction-Preview"><a href="#Introduction-Preview" class="headerlink" title="Introduction Preview"></a>Introduction Preview</h2><p>Nowadays, more than hundreds of processing elements (PEs) can be integrated into one system. The processing rate among different PEs varies since various application-specific integrated circuits (ASICs) are developed to assist or accelerate specific tasks. Therefore, the task mapping among PEs is of great significance due to the heterogeneous property of such heterogeneous computing systems (HCSs). Also, as the number of processing elements (PEs) integrated into one system increases, data transmission among PEs becomes the bottleneck for performance improvement, letting network-on-chip (NoC) become a promising solution for interconnecting hundreds or thousands of PEs. Moreover, the emerging point-to-point NoCs which support single-cycle-multi-hop transmission, reduce or eliminate the latency dependence on distance, addressing the scalability concern raised by high latency for long-distance transmission and enlarging the design space of the routing algorithm to search the non-shortest paths without resource contentions. Thus, the schedule length of one application runs on point-to-point NoC-based HCSs, i.e., the total time along its critical path, depends on resources management strategies, e.g., mapping and routing, which are managed by compilers, scheduler, or controllers.</p>
<p><img src="/images/marco1.jpg" alt="Relationship between task mapping and routing for point-to-point NoC-based HCSs."> </p>
<p>Mapping and routing are inter-dependent, as shown in Fig. 1, so that the co-optimization of mapping and routing is commonly proposed. In homogeneous computing systems, since PEs are with the same processing ability, the mapping would rarely influence the task execution time, targeting the communication time minimization only.<br>However, HCSs, which consist of various PEs that vary in their processing ability, involve the additional design objective for mapping algorithm, i.e., computation time minimization. Thus, the co-optimization algorithm proposed for point-to-point NoC-based homogeneous computing systems cannot be directly applied for point-to-point NoC-based HCSs. To illustrate this, in Fig. 2, we generate some random task mapping and routing solutions for application H.264, which is a widely-used video compression standard, on an emerging point-to-point NoC-based HCS with the mesh size of 8x8 and heterogeneity coefficient $V_{HCS}=0.25$ (we will explain it in Section II). We illustrate the result of the co-optimization algorithm for homogeneous computing systems using the purple pentagram. Compared with the best solution among the random mapping and routing denoted by the red pentagram, the method proposed in decreases the transmission latency but ignores the execution time optimization, resulting in longer schedule length.</p>
<p><img src="/images/marco2.jpg" alt="Illustration of design space exploration for task mapping and routing."></p>
<p>Moreover, conducting mapping and routing consecutively may not achieve minimum schedule length since the PEs with high processing ability may locate in the crowded area and suffer from high resource contention overhead. In Fig. 2, we test combination of two mapping results, i.e., communication-aware and computation-aware, and the state-of-the-art (SOTA) contention minimization routing algorithm for emerging point-to-point NoCs. Specifically, the <strong>communication-aware mapping</strong> is the mapping result of and the <strong>computation-aware mapping</strong> is the mapping with the least task execution time (we will explain this in Section V). Since the routing used in the co-optimization algorithm is XY routing, using the SOTA routing algorithm further reduces the transmission time. As shown in this example, the best solution is neither the one with the minimum execution time nor the one with the minimum transmission time. Although the previous motivation example adapts point-to-point NoCs as its communication backbone, the computation and communication trade-off through mapping and routing exists in other NoC-based HCSs. Inspired by the dilemma that execution time minimization and transmission time reduction cannot be achieved at the same time, searching the optimal solution on emerging NoC-based HCSs, i.e., the minimum schedule length of applications, needs to explore the entire design space of all possible mapping and routing choices. Note that, due to the complex dependency of task mapping and routing for NoC-based HCSs, co-optimization is also meaningful for other interesting objectives, e.g., energy consumption reduction.</p>
<p>However, the exploration of mapping and routing design space on NoC-based HCSs is challenging. Since once we change the mapping of a single task, the entire routing solution should be modified due to the following reasons: </p>
<ul>
<li>(1) At least the source or destination of one message is changed, influencing transmission of other messages. </li>
<li>(2) The execution time of that task is changed due to the different capacities of PEs, resulting in that the link usage state changes correspondingly. </li>
</ul>
<p>Also, the parallelism that exists in both task execution and data transmission lets the computation timeline and communication timeline overlap sometimes. Such parallelism makes the relationship of schedule length, transmission time, and execution time complex, thereby complicating the co-optimization of task mapping and routing.</p>
<p>In conclusion, the motivation for mapping and routing co-optimization is observed from the fact that: </p>
<ul>
<li>(1) The mapping should consider task execution time (since the PEs’ processing rate varies) and data communication time (since it decides the source and destination of the transmission) concurrently. </li>
<li>(2) The data communication time is unknown for task mapping due to the different performance of various routing candidates. </li>
<li>(3) For one specific mapping, the least data transmission time can be achieved is decided since the source and destination may locate in a crowded region and no NoC resource is available to transmit data. </li>
</ul>
<p>Thus, the co-optimization of task mapping and routing would benefit users and engineers who deploy or design applications on emerging NoC-based HCSs. In this article, the task mapping and routing are optimized simultaneously for application schedule length reduction.To the best of our knowledge, this is the first study on the co-optimization of task mapping and routing for emerging point-to-point NoC-based HCSs. The main contributions of our article are as follows:</p>
<p>1)<br>    We analyze the design space of task mapping and routing for emerging NoC-based HCSs.<br>    We identify that algorithms that unilaterally explore task mapping or routing cannot get the optimal solution since task mapping and routing are strongly related.<br>2)<br>    We propose MARCO, a task mapping and routing co-optimization framework for emerging NoC-based HCSs, to decrease the schedule length of applications.<br>    Specifically, we revise the tabu search to explore the design space and evaluate the quality of task mapping and routing. The advanced reinforcement learning algorithm, i.e., advantage actor-critic, is adopted to compute paths efficiently.<br>3)<br>    We perform extensive experiments on various real applications, which demonstrates that the MARCO achieves a remarkable performance improvement in terms of schedule length (+44.94% ~ +50.18%) when compared with the state-of-the-art mapping and routing co-optimization algorithm for homogeneous computing systems. We also compare MARCO with different combinations of state-of-the-art independent mapping and routing approaches.</p>
<hr>
<h2 id="Releted-Repo"><a href="#Releted-Repo" class="headerlink" title="Releted Repo"></a>Releted Repo</h2>]]></content>
      <categories>
        <category>Publications</category>
      </categories>
      <tags>
        <tag>Article</tag>
        <tag>MARCO</tag>
        <tag>Mapping</tag>
        <tag>Routing</tag>
        <tag>Co-optimization</tag>
      </tags>
  </entry>
  <entry>
    <title>Parallel Multipath Transmission for Burst Traffic Optimization in Point-to-Point NoCs</title>
    <url>/2020/11/20/PMT/</url>
    <content><![CDATA[<p><img src="/images/MPT.jpg" alt="Illustration of hardware design. (a). Overview ofdata transmission; (b). Router design; (c) Input NI design."></p>
<h2 id="Source"><a href="#Source" class="headerlink" title="Source"></a>Source</h2><p>This paper published in TCAD. To refer this:  </p>
<pre><code>Hui Chen, Zihao Zhang, Peng Chen, Shien Zhu, Weichen Liu. ``Parallel Multipath Transmission for Burst Traffic Optimization in Point-to-Point NoCs.&#39;&#39; In Proceedings of the Great Lakes Symposium on VLSI 2021(GLSVLSI ’21), June 22–25, 2021, Virtual Event, USA.ACM, New York, NY
</code></pre>
<h2 id="Abstract"><a href="#Abstract" class="headerlink" title="Abstract"></a>Abstract</h2><p>Network-on-chip (NoC) is a promising solution to connect more than hundreds of processing elements (PEs). As the number of PEs increases, the high communication latency caused by the burst traffic hampers the speedup gained by computation acceleration. Although parallel multipath transmission is an effective method to reduce transmission latency, its advantages have not been fully exploited in previous works, especially for emerging point-to-point NoCs since: </p>
<span id="more"></span>
<ul>
<li>(1) Previous static message splitting strategy increases contentions when traffic loads are heavy, degrading NoC performance. </li>
<li>(2) Only limited shortest paths are chosen, ignoring other possible paths without contentions. </li>
<li>(3) The optimization of hardware that supports parallel multipath transmission is missing, resulting in additional overhead. </li>
</ul>
<p>Thus, we propose a software and hardware collaborated design to reduce latency in point-to-point NoCs through parallel multipath transmission. Specifically, we revise hardware design to support parallel multipath transmission efficiently. Moreover, we propose a reinforcement learning-based algorithm to decide when and how to split messages, and which path should be used according to traffic loads. Experiments show that our algorithm achieves a remarkable performance improvement (+12.1% ~ +21.0%) when compared with the state-of-the-art dual-path algorithm. Also, our hardware decreases power and area consumption by 23.2% and 10.3% over the dual-path hardware.  </p>
<hr>
<h2 id="Introduction-Preview"><a href="#Introduction-Preview" class="headerlink" title="Introduction Preview"></a>Introduction Preview</h2><p>Network-on-Chip (NoC), as a promising solution for connecting more than hundreds of processing elements (PEs), provides high bandwidth by allowing transmitting messages in parallel. As the number of PEs increases, the high communication latency caused by the burst traffic erodes the speedup gained by parallelism and computation acceleration. Researchers have proposed their solutions to decrease NoC latency. From the hardware perspective, point-to-point NoCs transmits unconflicted flits to distant PEs using one cycle, targeting the end-to-end latency reduction. In ArSMART, authors proposed a point-to-point NoC which supports arbitrary routing and eliminates contentions at intermediate routers by adding delay at the source. From the software perspective, mapping and routing are two common ways to improve NoC performance. Although NoC resources, e.g., routers and links, are managed properly through mapping and routing, the parallelism of transmission is not fully utilized due to the unique path selection for a specific source-destination communication pair. In network communication, one communication pair can take more than one path, i.e., multipath, to transmit data to improve the transmission efficiency, inspiring researchers to apply multipath designs on NoCs.</p>
<p>In NoCs, initially, the multipath transmission has been proposed to reduce network congestion and traffic hotspots.Since most approaches just select one of the alternatives and send data sequentially, the high transmission latency is not fully alleviated. To further reduce latency, the simultaneous dual-path approach is proposed. This approach sends data through XY and YX paths concurrently if source and destination nodes are not in the same row or column. However, statically splitting the data into two fixed paths cannot fully exploit the advantages of parallel multipath transmission due to the following reasons. </p>
<ul>
<li>(1) Static message splitting strategy without considering the NoC utilization state increases contentions when traffic loads are heavy, degrading NoC performance.<br>Specifically, the dual-path algorithm indiscriminately injects up to twice of sub-messages into the NoC so that performance is dropped when encountering too much contentions.</li>
<li>(2) In dual-path design, only limited shortest paths, i.e., XY and YX, are chosen with the consideration that the end-to-end latency depends on the length of the transmission path, i.e., the number of hops, in traditional NoCs. Applying XY and YX paths limits the split degree to two and ignores other possible paths that can transmit data without contentions. However, in point-to-point NoCs, the end-to-end latency dependency on distance is reduced or eliminated, enlarging the routing design space of multipath.</li>
<li>(3) The optimization of hardware that supports parallel multipath transmission is missing in dual-path design, bringing large area and power overhead.</li>
</ul>
<p>To address these problems, in this paper, we propose a software and hardware collaborated design to fully exploit the advantages of parallel multipath transmission in point-to-point NoCs.<br>The main contributions of this paper are as follows:</p>
<p>1)<br>    We revised NoC router and network interface (NI) designs to support the parallel multipath transmission competently and re-order the packets from different ports with minimal overhead.<br>2)<br>    We proposed a parallel multipath algorithm, with which, the complex problems: when to split data transmission, how to split it, and which path should be taken to transmit data, are efficiently answered through the reinforcement learning-based approach to improve the NoC performance.</p>
<p> We performed extensive experiments on various real applications, which demonstrate that our algorithm achieves a remarkable performance improvement (+12.1% ~ +21.0%) when compared with the state-of-the-art dual-path algorithm. Also, our router and NI designs decrease power and area consumption by 23.2% and 10.3% over the dual-path hardware. </p>
<hr>
<h2 id="Releted-Repo"><a href="#Releted-Repo" class="headerlink" title="Releted Repo"></a>Releted Repo</h2>]]></content>
      <categories>
        <category>Publications</category>
      </categories>
      <tags>
        <tag>Article</tag>
        <tag>Multipath Parallel Transmission</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World - Hexo</title>
    <url>/2020/04/27/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<span id="more"></span>

<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
      <categories>
        <category>ReadMe</category>
      </categories>
      <tags>
        <tag>ReadMe</tag>
      </tags>
  </entry>
</search>
